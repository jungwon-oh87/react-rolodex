{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/input-box/input-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","width","height","name","CardList","monsters","map","m","key","InputBox","type","placeholder","onChange","handleChange","App","state","searchInput","handleInputChange","bind","fetch","then","response","json","users","setState","console","log","e","this","target","value","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UAkBeA,G,kBAfF,SAACC,GACZ,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,8BAAyBF,EAAMG,QAAQC,IAE1CC,IAAI,cACJC,MAAM,QACNC,OAAO,UAET,4BAAKP,EAAMG,QAAQK,SCRZC,EAAW,SAACT,GACvB,OACE,yBAAKC,UAAU,aACZD,EAAMU,SAASC,KAAI,SAACC,GACnB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAER,GAAID,QAASS,SCL5BE,G,MAAW,SAACd,GACvB,OACE,2BACEC,UAAU,SACVc,KAAK,SACLC,YAAahB,EAAMgB,YACnBC,SAAUjB,EAAMkB,iBC6CPC,E,kDAjDb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXV,SAAU,GACVW,YAAa,IAGf,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBARb,E,gEAWO,IAAD,OAElBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKC,SAAS,CACZnB,SAAUkB,IAEZE,QAAQC,IAAIH,Q,wCAIAI,GAAI,IAAD,OACnBC,KAAKJ,SAAS,CAAER,YAAaW,EAAEE,OAAOC,QAAS,WAC7CL,QAAQC,IAAI,EAAKX,MAAMC,kB,+BAIlB,MAE2BY,KAAKb,MAA/BV,EAFD,EAECA,SAAUW,EAFX,EAEWA,YACZe,EAAmB1B,EAAS2B,QAAO,SAACzB,GACxC,OAAOA,EAAEJ,KAAK8B,cAAcC,SAASlB,MAGvC,OACE,yBAAKpB,UAAU,OACb,2CACA,kBAAC,EAAD,CACEe,YAAY,oBACZE,aAAce,KAAKX,oBAErB,kBAAC,EAAD,CAAUZ,SAAU0B,S,GA5CVI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.03ad2b39.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\n\nconst Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        src={`http://edgecats.net/${props.monster.id}`}\n        // src={`https://randomuser.me/api/portraits/thumb/lego/${props.monster.id}.jpg`}\n        alt=\"lego-images\"\n        width=\"100px\"\n        height=\"100px\"\n      />\n      <h2>{props.monster.name}</h2>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport \"./card-list.style.css\";\n\nimport Card from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((m) => {\n        return <Card key={m.id} monster={m} />;\n      })}\n    </div>\n  );\n};\n","import React from \"react\";\n\nimport \"./input-box.style.css\";\n\nexport const InputBox = (props) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={props.placeholder}\n      onChange={props.handleChange}\n    />\n  );\n};\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { InputBox } from \"./components/input-box/input-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchInput: \"\",\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  componentDidMount() {\n    // fetching API\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({\n          monsters: users,\n        });\n        console.log(users);\n      });\n  }\n\n  handleInputChange(e) {\n    this.setState({ searchInput: e.target.value }, () => {\n      console.log(this.state.searchInput);\n    });\n  }\n\n  render() {\n    //destructure the state\n    const { monsters, searchInput } = this.state;\n    const filteredMonsters = monsters.filter((m) => {\n      return m.name.toLowerCase().includes(searchInput);\n    });\n\n    return (\n      <div className=\"App\">\n        <h2>Cat Rolodex</h2>\n        <InputBox\n          placeholder=\"Search your kitty\"\n          handleChange={this.handleInputChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}